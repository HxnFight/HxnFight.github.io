[
{
	"uri": "http://blog.valjean.cn/soul/env/",
	"title": "环境搭建",
	"tags": [],
	"description": "",
	"content": " 开篇随笔   自己的学习随笔和感想. 自己还没有做过这样正式的学习记录。  希望在这一个月的学习过程中，不断提升自己的能力。  进行开发环境、blog环境的搭建。  搞得还是有点仓促，只记录一下一些大致过程。  本来也有个国内ec2的环境，但是最近访问报网站未审核，  今天刚提了审核，可能得过几天才会下来。随后会迁移到自己的ec2上.  刚从manjaro 换到deepin系统上。有些软件还未安装完毕，先将就的用着  等周末将环境好好的整理一下 "
},
{
	"uri": "http://blog.valjean.cn/soul/exercise/",
	"title": "模块实践",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://blog.valjean.cn/soul/exercise/websocket/",
	"title": "Soul 数据同步-Websocket初探",
	"tags": [],
	"description": "",
	"content": " soul-admin 侧的数据同步   在soul-admin启动时, DataSyncConfiguration 配置类会根据配置文件加载对应的同步策略 其内有4个内部类,分别对应4中数据同步策略  不同策略在初始化时,均会通过spring容器构建一个DataChangedListener的实现类,用于后续的事件监听 websocket同步策略除了注入一个DataChangedListener bean,还会分别注入 WebsocketCollector ServerEndpointExporter  WebsocketCollector 其实就是soul-admin通过websocket 与soul-bootstrasp数据交互的入口. 包括接受链接,同步消息,处理链接错误信息等.  soul-admin 中业务层基本类似cms系统的增删改查功能,但是在数据变化的时候,均推送相应的事件  DataChangedEventDispatcher 里在对推送过来的事件,进行分门别类的处理. soul-bootstrap   这块的逻辑调用功能目前还有点凌乱 待后续画图补充完善 引用基本start   在soul-bootstrap中只引入以下的start进行分析  各个start分别引入的依赖以及进行的初始配置     soul-spring-boot-starter-gateway 这个start中仅仅引入的是soul-web相关的包,相关的初始化工作其实是在soul-web中进行的。       soul-spring-boot-starter-plugin-divide 该start引入的是 soul-plugin-divide 包. 其中主要的依赖如下. 可以看到起引入了spi相关的包。\n其内的DividePluginConfiguration 分别初始化了SoulPlugin、PluginDataHandler、WebSocketPlugin、ReactorNettyWebSocketClient、\nWebSocketService       soul-spring-boot-starter-plugin-global 该start引入的事soul-plugin-global相关依赖,其内有个GlobalPluginConfiguration初始化类，\n利用spring注入这三种bean SoulPlugin、SoulContextBuilder、MetaDataSubscriber    soul-spring-boot-starter-plugin-httpclient   该start引入的是soul-plugin-httpclient 的相关依赖,其中有HttpClientPluginConfiguration配置类，\n其内部类WebClientConfiguration,NettyHttpClientConfiguration 分别可以指定不同的httpclient类型  soul-spring-boot-starter-sync-data-websocket   该start引入的是soul-sync-data-websocket，其内的WebsocketSyncDataConfiguration向spring中注入SyncDataService、WebsocketConfig 两种类型的bean  websocket 中同步     WebsocketSyncDataConfiguration的初始化过程该模块使用 spring-boot-starter. 项目结构分层确实清晰明了. 在starter-sync-data-websocket中 WebsocketSyncDataConfiguration初始化流程如下：       WebSocketClient的调用过程    springboot相关的bean,待完善学习   项目中有些bean的初始化是用到了spring框架的相关特性,但是知其然不知其所以然. 比如:DataChangedEventDispatcher.afterPropertiesSet方法是将所有的DataChangedListener实现类赋值给自己的属性listeners 随后进行业务操作.另外还有以下几个:    ApplicationListener    InitializingBean    InstantiationAwareBeanPostProcessor    ApplicationContextAware    EnumMap    LocalDataSourceLoader 中实现了项目的sql初始化操作. 因建库、建表的sql语句中均有 IF NOT EXISTS. 故不会重复创建表   "
},
{
	"uri": "http://blog.valjean.cn/soul/exercise/tars-2/",
	"title": "soul-tars 插件实践",
	"tags": [],
	"description": "",
	"content": " soul-tars 后续  1. tars cloud 中尝试添加soul依赖   tarscloud的demo跑起来后，想着在其上引入 soul-spring-boot-starter-client-tars 依赖，来测试soul-tars。 但是将打好的jar发布到tars框架中，一直报jvm错误，也尝试调整jvm参数，但是均启动失败。 这块应该还是tars框架的使用问题 暂时未深入研究，随后开始尝试 soul-examples-tars.  2. soul-example-tars配置   和使用其他的插件一样， 需要先打开插件开关。 但是不同点是在官方的说明中，并未有tars的使用教程。 这点只能自己摸索。 我在配置的过程中，soul相关的项目是在本机启动， tarscloud是在另一台机器的。 故在配置application.yml的过程中，有一下几点需要注意。 #application.yml soul: tars: adminUrl: http://172.16.0.35:9095 contextPath: /tars appName: tars ipAndPort: 192.168.1.110:9002     soul.tars.adminUrl需要更改为实际的ip地址，    soul.tars.ipAndPort 配置要根据tars-node 启动脚本中暴露的端口来选择一个。 因为应用将来是部署在docker容器内的。\n而服务本身的端口与tars框架暴露的端口可以通过tars控制台来更改。       tars-node的启动脚本指定了9000 –\u0026gt; 9010之间的端口对外暴露   docker run -d \\ --name=tars-node \\ --net=tars \\ #-e INET=enp2s0 \\ -e WEB_HOST=\u0026#34;http://172.25.0.3:3000\u0026#34; \\ --ip=\u0026#34;172.25.0.5\u0026#34; \\ -v /data/workspace/tars-cloud/tars:/data/tars \\ -v /etc/localtime:/etc/localtime \\ -p 9000-9010:9000-9010 \\ tarscloud/tars-node:stable     将SoulExampleServer.SoulExampleApp.config.conf文件中 192.168.41.103 全部替换为127.0.0.1. 因其在容器内部调用   3. 接口测试调用   在tars中部署应用完成后， 可以在soul-admin 中tars的接口已经注册好了   tars 平台中调用soul-example 4. soul-gateway 调用   通用gateway的调用报的404，这个还在排查中. POST http://localhost:9195/tars/hello HTTP/1.1 404 Not Found Content-Type: application/json Content-Length: 136 { \u0026#34;timestamp\u0026#34;: \u0026#34;2021-01-22T08:04:09.878+0000\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/tars/hello\u0026#34;, \u0026#34;status\u0026#34;: 404, \u0026#34;error\u0026#34;: \u0026#34;Not Found\u0026#34;, \u0026#34;message\u0026#34;: null, \u0026#34;requestId\u0026#34;: \u0026#34;2adfe3bc\u0026#34; } Response code: 404 (Not Found); Time: 258ms; Content length: 136 bytes  5. 其他内容  "
},
{
	"uri": "http://blog.valjean.cn/soul/exercise/summary/",
	"title": "心得体会",
	"tags": [],
	"description": "",
	"content": " 一 做到、学到的   在这6天里,不管记录的多少、了解的深浅. 在这个大的环境中,一直跟着大家在坚持. 每天多多少少都学到了新的东西. 从第一天的环境搭建,正好将自己刚学习的hugo+github 搭建个人博客的给充分的实践起来. 目前不仅在记录学习使用soul的点点滴滴,也在小组内部 逐步推广起来. 完善工作中的一些琐碎内容的收集和展示.  再有之后,学习soul的使用从 divide–\u0026gt; http –\u0026gt; sofa –\u0026gt; springcloud –\u0026gt; tars. 自己暂时还没有太多的 源码解读,但是整个过程也是收货颇丰的,拓展了视野的范围. 比如: soul作为业务网关,可以 在自己的打点项目中,对在流量网关之后做些数据分流、数据复制,相对的比openresty之类的 流量网关好维护、控制一些.再个就是新了解到的sofa和tars,虽没有太深入的了解,但是通过 简单的搭建使用,至少知道有些事情确实可以做到的. 这点确实特别兴奋.  当然,在这段时间里,自己做的确实不够好. 有些时候也有点马虎. 看着其他的小伙伴那么认真 投入. 真的特别敬佩他们. 想起一句话 以大多数人的努力程度之低，根本轮不到拼天赋 . 再努力和坚持,希望能和大家走到最后的. 二 待改善的     时间安排 睡的太晚,确实有点吃不消的. 尽量将学习的时间调的早一些. 还得以工作内容为主,在soul学习 这块坚持每天有输出就好. 在完成基础任务之上,跟着大家学习.    任务安排 按照自己的时间和精力,规划好自己的节奏和目标. 没法像其他同学那么拼,但至少每天要有一点进步 每天要成长一些.    落下的任务 在过去几天落下的一些任务    soul-tars 的实践,tars的环境已经搭建完毕,尝试将soul-tars的模块跑起来.    webflux的学习实践    soul http dubbo插件的学习     三 下周目标     完成基本的任务.soul-admin soul-boostrap之间的数据同步    在使用的基础之上,解读部分模块的源码.   "
},
{
	"uri": "http://blog.valjean.cn/soul/exercise/tars/",
	"title": "Tars 学习",
	"tags": [],
	"description": "",
	"content": " tencent tars-cloud 实践   昨天调试soul-tars 插件，后台服务tars一直启动失败。 今天参考 office quick start ，总算启动成功，不过其中还有很多需要注意的点，在此记录一下。 注意事项     对tars的整体结构得有个大概的认识，自己再部署后面的 tars-framework, tars-nodes 一直不成功 文档中介绍， Tars 框架, 有两个镜像可供选择: framework / tars .自己一直理解成了是framework/nodes framework 、 nodes 两码事. 如果将来拿framework作为节点发布服务，会出现pid not exist. 因其没有java环境 issues   framework: Tars 框架 Docker 制作脚本, 制作的 docker 包含了框架核心服务和 web 管理平台 tars: Tars 框架 Docker 制作脚本, 和 framework 比, 增加了 java, nodejs 等运行时支持, 即可以把 java, nodejs 服务发布到 docker 里面(docker 里面安装了 jdk, node, php 环境) nodes: 是正常的代码运行环境，包含基本的开发环境。     在使用docker快速搭建环境时，在Linux环境下，官方提供了国内的镜像地址 一下的命令执行后，发现是修改的docker daemon 配置文件，将镜像仓库地址更改为了aliyun的。 目前测试在此仓库下，安装mysql 也挺快的，其他镜像未测试，在测试完tars最好还手动更改回去。 其实这块配置的是数组形式，应该可以添加多个. 国内镜像地址: https://registry.docker-cn.com 再个如果curl 报 curl: (60) Peer\u0026#39;s Certificate has expired 按提示，添加 -k 指令即可 curl -sSL https://doc.tarsdoc.com/docker_set_mirror.sh | sh -s https://w1mnep2c.mirror.aliyuncs.com systemctl restart docker   /etc/docker/daemon.json 内容如下 { \u0026#34;registry-mirrors\u0026#34;: [\u0026#34;https://w1mnep2c.mirror.aliyuncs.com\u0026#34;] }     用docker启动时，参数中的port 不要随便更改. 因本地3000， 3306 端口有他用，更改了启动脚本的端口. 3306 –\u0026gt; 3307 tarscloud/framework 报连不上mysql， 而且mysql的port依旧是3306 3000 –\u0026gt; 3010 tarscloud/tars-node 启动后不能自动注册到tarscloud/framework. 随后将其他服务关闭，改回原来的port启动成功.    官方启动脚本中，有一个 -e INET , 如果启动报错，删除即可   服务部署   目前使用docker 单独启动各个服务，官方提供的docker-compose暂未测试，调试麻烦。 注意将镜像的相关目录，映射到宿主机后。在清理环境的时候，删除对应的目录，以免污染测试环境。 启动脚本如下  #所用系统信息 #LSB Version: :core-4.1-amd64:core-4.1-noarch #Distributor ID: CentOS #Description: CentOS Linux release 7.6.1810 (Core) #Release: 7.6.1810 #Codename: Core # 创建一个名为tars的桥接(bridge)虚拟网络，网关172.25.0.1，网段为172.25.0.0 docker network create -d bridge --subnet=172.25.0.0/16 --gateway=172.25.0.1 tars docker run -d \\  --net=tars \\  -e MYSQL_ROOT_PASSWORD=\u0026#34;123456\u0026#34; \\  --ip=\u0026#34;172.25.0.2\u0026#34; \\  -v /data/workspace/tars-cloud/mysql:/var/lib/mysql \\  -v /etc/localtime:/etc/localtime \\  --name=tars-mysql \\  mysql:5.6 # 挂载的/etc/localtime是用来设置容器时区的，若没有可以去掉 # 3000端口为web程序端口 # 3001端口为web授权相关服务端口 docker run -d \\  --name=tars-framework \\  --net=tars \\  -e MYSQL_HOST=\u0026#34;172.25.0.2\u0026#34; \\  -e MYSQL_ROOT_PASSWORD=\u0026#34;123456\u0026#34; \\  -e MYSQL_USER=root \\  -e MYSQL_PORT=3306 \\  -e REBUILD=false \\  -e SLAVE=false \\  --ip=\u0026#34;172.25.0.3\u0026#34; \\  -v /data/workspace/tars-cloud/tars:/data/tars \\  -v /etc/localtime:/etc/localtime \\  -p 3000:3000 \\  -p 3001:3001 \\  tarscloud/framework:stable docker run -d \\  --name=tars-node \\  --net=tars \\  #-e INET=enp2s0 \\ -e WEB_HOST=\u0026#34;http://172.25.0.3:3000\u0026#34; \\  --ip=\u0026#34;172.25.0.5\u0026#34; \\  -v /data/workspace/tars-cloud/tars:/data/tars \\  -v /etc/localtime:/etc/localtime \\  -p 9000-9010:9000-9010 \\  tarscloud/tars-node:stable  测试代码   java 快速入门 直接下载官方的代码，使用其中的example测试即可, 使用springboot项目 tars-spring-boot-server 测试 在其pom中需要添加编译插件，依赖如下: \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;com.tencent.tars\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;tars-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.6.1\u0026lt;/version\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;tars2JavaConfig\u0026gt; \u0026lt;!-- tars文件位置 --\u0026gt; \u0026lt;tarsFiles\u0026gt; \u0026lt;tarsFile\u0026gt;${basedir}/src/main/resources/hello.tars\u0026lt;/tarsFile\u0026gt; \u0026lt;/tarsFiles\u0026gt; \u0026lt;!-- 源文件编码 --\u0026gt; \u0026lt;tarsFileCharset\u0026gt;UTF-8\u0026lt;/tarsFileCharset\u0026gt; \u0026lt;!-- 生成服务端代码 --\u0026gt; \u0026lt;servant\u0026gt;true\u0026lt;/servant\u0026gt; \u0026lt;!-- 生成源代码编码 --\u0026gt; \u0026lt;charset\u0026gt;UTF-8\u0026lt;/charset\u0026gt; \u0026lt;!-- 生成的源代码目录 --\u0026gt; \u0026lt;srcPath\u0026gt;${basedir}/src/main/java\u0026lt;/srcPath\u0026gt; \u0026lt;!-- 生成源代码包前缀 --\u0026gt; \u0026lt;packagePrefixName\u0026gt;com.qq.tars.quickstart.server.\u0026lt;/packagePrefixName\u0026gt; \u0026lt;/tars2JavaConfig\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt;  日志路径   tars 的日志都在/data/tars/ 已经映射到宿主机， 本机情况如下, 如果有问题，可以在此查看。 tars配置与使用     配置应用, 这里基础概念很重要     tars 基础概念 应用名：表示一组服务的集合 –\u0026gt; APP 服务名称：提供服务的进程名称 –\u0026gt; Server OBJ：提供具体服务的接口 –\u0026gt; Servant   web的配置需要和程序中的命名一一对应, examples中可以按照下图识别  web中配置如下：    发布服务    配置节点: 这里的172.25.0.5 即为tarscloud/tars-node, 如果程序正常启动，是可以自动注册到web端的.  发布服务: 有历史记录的功能  服务状态: 双~Active~ 代表配置成功。失败的话，得查看log  接口调试. 在web中，上次对应的tars文件，即可对接口进行调试.  在web直接查看日志log. 这个确实方便，我们目前的日志，有部分发往es，而绝大部分的日志，只能在服务器上查看。 后期   再尝试启动soul中的tars插件，目前还在调试中 "
},
{
	"uri": "http://blog.valjean.cn/soul/exercise/springcloud/",
	"title": "Springcloud",
	"tags": [],
	"description": "",
	"content": " soul springcloud  实践  在soul中增加springcloud配置     将soul-boostrap中有关springcloud的依赖注释打开,注册中心选用的eureka. docker镜像没下载成功,按照教程 eureka tutor, 创建springboot项目,引入 eureka相关依赖,搞定eureka的server服务.    soul-admin 中 打开springcloud插件开关 系统管理 –\u0026gt; 插件管理 (直接保存就ok)   请求调用  ### 测试查询数据 GET http://localhost:9195/springcloud/order/findById?id=999 { \u0026#34;id\u0026#34;: \u0026#34;999\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;hello world spring cloud findById\u0026#34; } ### 测试保存数据 POST http://localhost:9195/springcloud/order/save Content-Type: application/json { \u0026#34;id\u0026#34;: \u0026#34;999\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;valjean\u0026#34; } { \u0026#34;id\u0026#34;: \u0026#34;999\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;hello world spring cloud save order\u0026#34; }  tars cloud   又发现一个新的rpc框架tarscloud, 原来以为是个压缩相关的模块的呢, ~tars~嘛. 引用下官方的一个项目说明   TARS是Linux基金会的开源项目，它是基于名字服务使用TARS协议的高性能RPC开发框架， 配套一体化的运营管理平台，并通过伸缩调度，实现运维半托管服务。 TARS是腾讯从2008年到今天一直在使用的后台逻辑层的统一应用框架，覆盖腾讯100多个产品。\n目前支持C++,Java,PHP,Nodejs,Go语言。该框架为用户提供了涉及到开发、运维、以及测试的一整套解决方案，\n帮助一个产品或者服务快速开发、部署、测试、上线。 它集可扩展协议编解码、高性能RPC通信框架、名字路由与发现、发布监控、日志统计、配置管理等于一体， 通过它可以快速用微服务的方式构建自己的稳定可靠的分布式应用，并实现完整有效的服务治理。 目前该框架在腾讯内部，各大核心业务都在使用，颇受欢迎，基于该框架部署运行的服务节点规模达到上万个。   office docs 通过soul,前几天接触到阿里的sofa,今天又接触到腾讯的tars. 虽说目前用不上,但是真的蛮开眼界的 只大概看了一些官方文档的资料,目前还没有跑起来. 明天继续. "
},
{
	"uri": "http://blog.valjean.cn/soul/exercise/webflux/",
	"title": "Webflux",
	"tags": [],
	"description": "",
	"content": " webflux   office docs "
},
{
	"uri": "http://blog.valjean.cn/soul/exercise/sofa/",
	"title": "Sofa 模块实践",
	"tags": [],
	"description": "",
	"content": " sofa调试  修改配置     soul-boostrap pom 文件中增加相关依赖   \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.dromara\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;soul-spring-boot-starter-plugin-sofa\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${project.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alipay.sofa\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;sofa-rpc-all\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt;     在soul-admin中打开sofa的插件开关 系统管理 –\u0026gt; 插件管理 (直接保存就ok)   请求调用   使用的idea http client 工具 ### 测试保存数据 post http://localhost:9195/sofa/insert content-type: application/json { \u0026#34;id\u0026#34;: \u0026#34;999\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;valjean\u0026#34; } ### 测试按条件查找数据 post http://localhost:9195/sofa/findbyid content-type: application/json { \u0026#34;id\u0026#34;: \u0026#34;999\u0026#34; } ### 测试无条件查询 post http://localhost:9195/sofa/findall  遇到的问题     不带参数请求ok,带参数出现序列化错误. 调试发现此处为空 按照官方文档sofa-user,实现SofaParamResolveService 调试跟踪发现,请求已经进入到后端的服务中. 只是在rpc反序列化时出的错. 不过跟代码没找到具体的问题.  最后在csdn中发现有同学已经踩坑, 此bug也已经做了修复,在github上更新最新代码即可. 另一个踩坑的同学 github pr   sofa 拓展   第一次接触sofa项目. 大概浏览了一下官网的介绍。对其有个大概的了解。目前暂未学习使用的打算 后续再说，目前仅记录于此。    sofastack github    sofastack website   子项目      SOFABoot 是蚂蚁金服开源的基于 Spring Boot 的研发框架，它在 Spring Boot 的基础上， 提供了诸如 Readiness Check，类隔离，日志空间隔离等能力。在增强了 Spring Boot 的同时， SOFABoot 提供了让用户可以在 Spring Boot 中非常方便地使用 SOFA 中间件的能力。    SOFARpc 是蚂蚁金服开源的一款基于 Java 实现的 RPC 服务框架，为应用之间提供远程服务调用能力，\n具有高可伸缩性，高容错性，目前蚂蚁金服所有的业务的相互间的 RPC 调用都是采用 SOFARPC。\nSOFARPC 为用户提供了负载均衡，流量转发，链路追踪，链路数据透传，故障剔除等功能。    SOFATracer 是蚂蚁金服开发的基于 OpenTracing 规范 的分布式链路跟踪系统，\n其核心理念就是通过一个全局的 TraceId 将分布在各个服务节点上的同一次请求串联起来。\n通过统一的 TraceId 将调用链路中的各种网络调用情况以日志的方式记录下来同时也提供远程汇报到 Zipkin 进行展示的能力， 以此达到透视化网络调用的目的。    SOFARegistry 是蚂蚁金服开源的一个生产级、高时效、高可用的服务注册中心。 SOFARegistry 最早源自于淘宝的 ConfigServer，十年来，随着蚂蚁金服的业务发展，注册中心架构已经演进至第五代。 目前 SOFARegistry 不仅全面服务于蚂蚁金服的自有业务，还随着蚂蚁金融科技服务众多合作伙伴，同时也兼容开源生态。 SOFARegistry 采用 AP 架构，支持秒级时效性推送，同时采用分层架构支持无限水平扩展。    SOFALookout 是蚂蚁金服开源的一款解决系统的度量和监控问题的轻量级中间件服务。 它提供的服务包括：Metrics 的埋点、收集、加工、存储与查询等。该开源项目包括了两个独立部分，分别是客户端与服务器端服务。    "
},
{
	"uri": "http://blog.valjean.cn/soul/exercise/dubbo/",
	"title": "Dubbo 模块实践",
	"tags": [],
	"description": "",
	"content": " dubbo模块  参考手册   官方:dubbo插件 官方:dubbo用户  文档说明很详细的,其中提到以下几个重点    dubbo 服务接入soul的配置    接入之后的调用方式, 参数传递方式. 全部是post请求 Content-Type: application/json格式.    将dubbo服务转成http形式, 感觉可以用在项目中,省去给dubbo服务搭建的空壳子api.   实际测试    偶尔发现idea自带的 http client,比之前有了很大的改善,可以支持将请求放在文本中. 具体的使用可以参考官方文档: idea tools http client  # dubbo 插件的要用post请求,请求类型为 Content-Type: application/json # 测试查询数据 POST http://localhost:9195/dubbo/findById Content-Type: application/json { \u0026#34;id\u0026#34;: \u0026#34;999\u0026#34; } # 测试保存数据 POST http://localhost:9195/dubbo/insert Content-Type: application/json { \u0026#34;id\u0026#34;: \u0026#34;999\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;valjean\u0026#34; }   Tip: 请求记录文件,可以直接导入idea中     dubbo-test.http  (0 )    遇到的问题     dubbo 启动之后报错 这个暂未定位到什么地方出错 java.lang.IllegalStateException: No such application config! Please add \u0026lt;dubbo:application name=\u0026#34;...\u0026#34; /\u0026gt; to your spring config. at com.alibaba.dubbo.config.AbstractInterfaceConfig.checkApplication(AbstractInterfaceConfig.java:145) ~[dubbo-2.6.5.jar:2.6.5] at com.alibaba.dubbo.config.ReferenceConfig.init(ReferenceConfig.java:278) ~[dubbo-2.6.5.jar:2.6.5] at com.alibaba.dubbo.config.ReferenceConfig.get(ReferenceConfig.java:163) ~[dubbo-2.6.5.jar:2.6.5] at org.dromara.soul.plugin.alibaba.dubbo.cache.ApplicationConfigCache.build(ApplicationConfigCache.java:166) ~[classes/:na] at org.dromara.soul.plugin.alibaba.dubbo.cache.ApplicationConfigCache.initRef(ApplicationConfigCache.java:130) ~[classes/:na] at org.dromara.soul.plugin.alibaba.dubbo.subscriber.AlibabaDubboMetaDataSubscriber.onSubscribe(AlibabaDubboMetaDataSubscriber.java:43) ~[classes/:na]     soul-examples-dubbo 启动之后,访问显示的divide插件信息 需要在soul-admin中打开dubbo的插件开关 系统管理---\u0026gt; 插件管理 再个就是注意请求的数据类型,要个bean中定义的一致. #网关报错如下 can not match selector data: divide # 请求结果如下 { \u0026#34;code\u0026#34;: -107, \u0026#34;message\u0026#34;: \u0026#34;Can not find selector, please check your configuration!\u0026#34;, \u0026#34;data\u0026#34;: null }    手册回顾   再回顾官方文档的过程中,记录一下新的兴趣点    soul 配置规则学习 官方文档说明 其中最重要的三个概念: 插件 选择器 规则 一个插件对应多个选择器, 一个选择器对应多个规则 一个选择器对应多个匹配条件, 一个规则对应多个匹配条件 反应到表结构上,可以参考 数据库设计 ,后续会记录详细的配置使用记录    soul 插件 soul 目前的插件有十几种,其中自己感兴趣以及目前工作中能用到的有    divide    sign    rewrite    waf    monitor    会着重看一下的    如下几个功能点特感兴趣    soul-admin与soul网关数据同步的三种方式    soul-client对本地接口数据的收集实现    插件热插拔的实现机制     "
},
{
	"uri": "http://blog.valjean.cn/soul/exercise/http-divie/",
	"title": "divide 模块实践",
	"tags": [],
	"description": "",
	"content": " divide 模块  参考手册   在项目根目录下的doc doc ├── user-http.md └── plugin-divide.md   通过这两个文档的介绍，针对http的调用，明白两件事。    会在自己的项目中引入soul依赖，并且配置相关的接口. 让soul代理自己的接口    会调用soul的接口, 会配置admin中divide插件   启动项目   启动没有什么特殊配置，idea下一键启动. 启动后注意下各个服务的端口号,soul默认的端口如下    server port comment     SoulAdminBootstrap 9095 管理后台   SoulBootstrapApplication 9195 网关   SoulTestHttpApplication 8188 测试项目     在用soul 代理http接口后，请求地址和端口需要换成网关的。\n接口的url也需要按照管理后台中的配置请求. 具体的请求，后面有样例. 测试请求     post 的请求方式   # 项目自身的请求 curl -s -H \u0026#34;Content-type: application/json\u0026#34; -d \u0026#39;@./param.json\u0026#39; -X POST localhost:8188//order/save | jq \u0026#39;.\u0026#39;n # soul 代理的请求 curl -s -H \u0026#34;Content-type: application/json\u0026#34; -d \u0026#39;@./param.json\u0026#39; -X POST localhost:9195/http/order/save | jq \u0026#39;.\u0026#39;n      get 的请求方式   # 项目自身的请求 curl -s localhost:8188/order/findById\\?id=1 | jq \u0026#39;.\u0026#39; # soul 代理的请求 curl -s localhost:9195/http/order/findById\\?id=1 | jq \u0026#39;.\u0026#39;     安利一下： jq 终端下处理json 文本、文件的瑞士军刀  总结   项目中使用到了webflux相关内容，这块之前没有接触过，周末会补充一下。\n通过项目中自带的docs、example-http.对soul的架构有了进一步的理解。  自己简要理解如下： . 后续会补充自己的认知流程图  官网的架构图如下: "
},
{
	"uri": "http://blog.valjean.cn/soul/env/basic/",
	"title": "文档环境、代码环境",
	"tags": [],
	"description": "",
	"content": " hugo theme 选择     一直再找一个比较合适的blog生成工具. 最早的时候是自己编写markdown，上传到csdn中. 后来接触到vim emacs，使用emacs orgmode 自带的publish系统搭建了一套自己的wiki 也整合上传到了github中，不过后续更少更新。所有的学习笔记、工作笔记也都是记录再本地中基本都是组内人再访问。 随后也尝试过jekyll，但是都不太理想。直到前段时间接触、学习了hugo。感觉还是比较符合自己的需求。 目前简单修改了一个主题来使用 hugo-theme-learn, 改的比较糙。也在慢慢的优化使用. 还有就是这个排版，也好头疼。等我再搞搞的   github pages 设置     早期在github page中搭建blog是建立一个\u0026lt;USERNAME\u0026gt;.github.io项目。 将编译后的静态内容作为内容提交。    这几天在查看hugo的发布时，发现在可以在github.io项目中，建立一个docs的文件夹，来存放 生成的静态网站内容，这样方便和源码存放。   soul 代码编译     下载代码 git clone https://github.com/dromara/soul.git     编译代码 shardingshpere 中也是采用这样的命令。 其中rat checkstyle 有空看看的，自己的项目中没有使用过. mvn clean package install -Dmaven.test.skip=true -Dmaven.javadoc.skip=true -Drat.skip=true -Dcheckstyle.skip=true     deepin install docker tutor sudo apt-get remove -y docker docker-engine docker.io containerd runc sudo apt-get install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add - sudo apt-key fingerprint 0EBFCD88 # 主要是这句，官方文档中，执行类似的这句报错 # https://docs.docker.com/engine/install/ubuntu/ #sudo add-apt-repository \\ # \u0026#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ # $(lsb_release -cs) \\ # stable\u0026#34; printf \u0026#39;deb [arch=amd64] https://download.docker.com/linux/debian stretch stable\\n\u0026#39; | sudo tee /etc/apt/sources.list.d/docker-ce.list sudo apt-get update -y sudo apt-get install -y docker-ce sudo usermod -aG docker $(whoami)     docker install mysql docker run --rm -d --name local_mysql \\ -v /data/docker/mysql/:/var/lib/mysql \\ -p 3306:3306 -e MYSQL_ROOT_PASSWORD=xxxxxxx mysql:5.7.32     docker install zk docker run -d --rm \\ -p 2181:2181 -p 2888:2888 -p 3888:3888 -p 8080:8080 \\ --name local-zk \\ -v /tmp/log/zk:/logs/ \\ -e ZOO_LOG4J_PROP=\u0026#34;INFO,ROLLINGFILE\u0026#34; \\ zookeeper     soul-admin 启动  mysql 安装以后，修改soul-admin配置文件application-local.yml 中的db密码，就可以编译启动 db 相关文件soul会自动创建    环境待改善的地方     emacs emacs 中配置spacemacs, 家里下载spacemacs比较慢。 emacs 排版问题    vim vim 中 YouCompleteMe插件的编译安装 vim本身配置的调试    deepin 开机中加入一些自启动项    hugo 安装的版本过低，渲染org文件失败，折腾半天，升级最近的版本后 支持渲染org文件,这点疏忽了，公司环境安装的比较新。    rat checkstyle 查一些资料   "
},
{
	"uri": "http://blog.valjean.cn/",
	"title": "soul 学习笔记",
	"tags": [],
	"description": "",
	"content": " soul 学习笔记     官方文档   "
},
{
	"uri": "http://blog.valjean.cn/soul/",
	"title": "soul 学习笔记",
	"tags": [],
	"description": "",
	"content": " 开篇  "
},
{
	"uri": "http://blog.valjean.cn/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://blog.valjean.cn/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]