[
{
	"uri": "http://blog.valjean.cn/soul/env/",
	"title": "环境搭建",
	"tags": [],
	"description": "",
	"content": " 开篇随笔   自己的学习随笔和感想. 自己还没有做过这样正式的学习记录。\n 希望在这一个月的学习过程中，不断提升自己的能力。\n 进行开发环境、blog环境的搭建。\n 搞得还是有点仓促，只记录一下一些大致过程。\n 本来也有个国内ec2的环境，但是最近访问报网站未审核，\n 今天刚提了审核，可能得过几天才会下来。随后会迁移到自己的ec2上.\n 刚从manjaro 换到deepin系统上。有些软件还未安装完毕，先将就的用着\n 等周末将环境好好的整理一下\n  "
},
{
	"uri": "http://blog.valjean.cn/soul/exercise/",
	"title": "模块实践",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://blog.valjean.cn/soul/exercise/springcloud/",
	"title": "Springcloud",
	"tags": [],
	"description": "",
	"content": " soul springcloud  实践  在soul中增加springcloud配置    将soul-boostrap中有关springcloud的依赖注释打开,注册中心选用的eureka. docker镜像没下载成功,按照教程 eureka tutor, 创建springboot项目,引入 eureka相关依赖,搞定eureka的server服务.\n  soul-admin 中 打开springcloud插件开关 系统管理 –\u0026gt; 插件管理 (直接保存就ok)\n    请求调用  ### 测试查询数据 GET http://localhost:9195/springcloud/order/findById?id=999 { \u0026#34;id\u0026#34;: \u0026#34;999\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;hello world spring cloud findById\u0026#34; } ### 测试保存数据 POST http://localhost:9195/springcloud/order/save Content-Type: application/json { \u0026#34;id\u0026#34;: \u0026#34;999\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;valjean\u0026#34; } { \u0026#34;id\u0026#34;: \u0026#34;999\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;hello world spring cloud save order\u0026#34; }        tars cloud  又发现一个新的rpc框架tarscloud, 原来以为是个压缩相关的模块的呢, ~tars~嘛. 引用下官方的一个项目说明\n TARS是Linux基金会的开源项目，它是基于名字服务使用TARS协议的高性能RPC开发框架， 配套一体化的运营管理平台，并通过伸缩调度，实现运维半托管服务。 TARS是腾讯从2008年到今天一直在使用的后台逻辑层的统一应用框架，覆盖腾讯100多个产品。\n目前支持C++,Java,PHP,Nodejs,Go语言。该框架为用户提供了涉及到开发、运维、以及测试的一整套解决方案，\n帮助一个产品或者服务快速开发、部署、测试、上线。 它集可扩展协议编解码、高性能RPC通信框架、名字路由与发现、发布监控、日志统计、配置管理等于一体， 通过它可以快速用微服务的方式构建自己的稳定可靠的分布式应用，并实现完整有效的服务治理。 目前该框架在腾讯内部，各大核心业务都在使用，颇受欢迎，基于该框架部署运行的服务节点规模达到上万个。\n office docs 通过soul,前几天接触到阿里的sofa,今天又接触到腾讯的tars. 虽说目前用不上,但是真的蛮开眼界的 只大概看了一些官方文档的资料,目前还没有跑起来. 明天继续.\n  "
},
{
	"uri": "http://blog.valjean.cn/soul/exercise/webflux/",
	"title": "Webflux",
	"tags": [],
	"description": "",
	"content": " webflux  office docs\n  "
},
{
	"uri": "http://blog.valjean.cn/soul/exercise/sofa/",
	"title": "Sofa 模块实践",
	"tags": [],
	"description": "",
	"content": " sofa调试  修改配置    soul-boostrap pom 文件中增加相关依赖\n  \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.dromara\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;soul-spring-boot-starter-plugin-sofa\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${project.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alipay.sofa\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;sofa-rpc-all\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt;    在soul-admin中打开sofa的插件开关 系统管理 –\u0026gt; 插件管理 (直接保存就ok)\n    请求调用  使用的idea http client 工具\n### 测试保存数据 post http://localhost:9195/sofa/insert content-type: application/json { \u0026#34;id\u0026#34;: \u0026#34;999\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;valjean\u0026#34; } ### 测试按条件查找数据 post http://localhost:9195/sofa/findbyid content-type: application/json { \u0026#34;id\u0026#34;: \u0026#34;999\u0026#34; } ### 测试无条件查询 post http://localhost:9195/sofa/findall    遇到的问题    不带参数请求ok,带参数出现序列化错误. 调试发现此处为空 按照官方文档sofa-user,实现SofaParamResolveService 调试跟踪发现,请求已经进入到后端的服务中. 只是在rpc反序列化时出的错. 不过跟代码没找到具体的问题.\n 最后在csdn中发现有同学已经踩坑, 此bug也已经做了修复,在github上更新最新代码即可. 另一个踩坑的同学 github pr       sofa 拓展   第一次接触sofa项目. 大概浏览了一下官网的介绍。对其有个大概的了解。目前暂未学习使用的打算 后续再说，目前仅记录于此。\n  sofastack github   sofastack website\n  子项目     SOFABoot 是蚂蚁金服开源的基于 Spring Boot 的研发框架，它在 Spring Boot 的基础上， 提供了诸如 Readiness Check，类隔离，日志空间隔离等能力。在增强了 Spring Boot 的同时， SOFABoot 提供了让用户可以在 Spring Boot 中非常方便地使用 SOFA 中间件的能力。\n  SOFARpc 是蚂蚁金服开源的一款基于 Java 实现的 RPC 服务框架，为应用之间提供远程服务调用能力，\n具有高可伸缩性，高容错性，目前蚂蚁金服所有的业务的相互间的 RPC 调用都是采用 SOFARPC。\nSOFARPC 为用户提供了负载均衡，流量转发，链路追踪，链路数据透传，故障剔除等功能。   SOFATracer 是蚂蚁金服开发的基于 OpenTracing 规范 的分布式链路跟踪系统，\n其核心理念就是通过一个全局的 TraceId 将分布在各个服务节点上的同一次请求串联起来。\n通过统一的 TraceId 将调用链路中的各种网络调用情况以日志的方式记录下来同时也提供远程汇报到 Zipkin 进行展示的能力， 以此达到透视化网络调用的目的。   SOFARegistry 是蚂蚁金服开源的一个生产级、高时效、高可用的服务注册中心。 SOFARegistry 最早源自于淘宝的 ConfigServer，十年来，随着蚂蚁金服的业务发展，注册中心架构已经演进至第五代。 目前 SOFARegistry 不仅全面服务于蚂蚁金服的自有业务，还随着蚂蚁金融科技服务众多合作伙伴，同时也兼容开源生态。 SOFARegistry 采用 AP 架构，支持秒级时效性推送，同时采用分层架构支持无限水平扩展。   SOFALookout 是蚂蚁金服开源的一款解决系统的度量和监控问题的轻量级中间件服务。 它提供的服务包括：Metrics 的埋点、收集、加工、存储与查询等。该开源项目包括了两个独立部分，分别是客户端与服务器端服务。\n       "
},
{
	"uri": "http://blog.valjean.cn/soul/exercise/dubbo/",
	"title": "Dubbo 模块实践",
	"tags": [],
	"description": "",
	"content": " dubbo模块  参考手册  官方:dubbo插件 官方:dubbo用户  文档说明很详细的,其中提到以下几个重点\n  dubbo 服务接入soul的配置\n  接入之后的调用方式, 参数传递方式. 全部是post请求 Content-Type: application/json格式.\n  将dubbo服务转成http形式, 感觉可以用在项目中,省去给dubbo服务搭建的空壳子api.\n    实际测试    偶尔发现idea自带的 http client,比之前有了很大的改善,可以支持将请求放在文本中. 具体的使用可以参考官方文档: idea tools http client  # dubbo 插件的要用post请求,请求类型为 Content-Type: application/json # 测试查询数据 POST http://localhost:9195/dubbo/findById Content-Type: application/json { \u0026#34;id\u0026#34;: \u0026#34;999\u0026#34; } # 测试保存数据 POST http://localhost:9195/dubbo/insert Content-Type: application/json { \u0026#34;id\u0026#34;: \u0026#34;999\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;valjean\u0026#34; }   Tip: 请求记录文件,可以直接导入idea中     dubbo-test.http  (0 )      遇到的问题    dubbo 启动之后报错 这个暂未定位到什么地方出错\njava.lang.IllegalStateException: No such application config! Please add \u0026lt;dubbo:application name=\u0026#34;...\u0026#34; /\u0026gt; to your spring config. at com.alibaba.dubbo.config.AbstractInterfaceConfig.checkApplication(AbstractInterfaceConfig.java:145) ~[dubbo-2.6.5.jar:2.6.5] at com.alibaba.dubbo.config.ReferenceConfig.init(ReferenceConfig.java:278) ~[dubbo-2.6.5.jar:2.6.5] at com.alibaba.dubbo.config.ReferenceConfig.get(ReferenceConfig.java:163) ~[dubbo-2.6.5.jar:2.6.5] at org.dromara.soul.plugin.alibaba.dubbo.cache.ApplicationConfigCache.build(ApplicationConfigCache.java:166) ~[classes/:na] at org.dromara.soul.plugin.alibaba.dubbo.cache.ApplicationConfigCache.initRef(ApplicationConfigCache.java:130) ~[classes/:na] at org.dromara.soul.plugin.alibaba.dubbo.subscriber.AlibabaDubboMetaDataSubscriber.onSubscribe(AlibabaDubboMetaDataSubscriber.java:43) ~[classes/:na]    soul-examples-dubbo 启动之后,访问显示的divide插件信息 需要在soul-admin中打开dubbo的插件开关 系统管理---\u0026gt; 插件管理 再个就是注意请求的数据类型,要个bean中定义的一致.\n#网关报错如下 can not match selector data: divide # 请求结果如下 { \u0026#34;code\u0026#34;: -107, \u0026#34;message\u0026#34;: \u0026#34;Can not find selector, please check your configuration!\u0026#34;, \u0026#34;data\u0026#34;: null }        手册回顾  再回顾官方文档的过程中,记录一下新的兴趣点\n  soul 配置规则学习 官方文档说明 其中最重要的三个概念: 插件 选择器 规则 一个插件对应多个选择器, 一个选择器对应多个规则 一个选择器对应多个匹配条件, 一个规则对应多个匹配条件 反应到表结构上,可以参考 数据库设计 ,后续会记录详细的配置使用记录\n  soul 插件 soul 目前的插件有十几种,其中自己感兴趣以及目前工作中能用到的有\n  divide   sign\n  rewrite\n  waf\n  monitor\n  会着重看一下的   如下几个功能点特感兴趣\n  soul-admin与soul网关数据同步的三种方式\n  soul-client对本地接口数据的收集实现\n  插件热插拔的实现机制\n      "
},
{
	"uri": "http://blog.valjean.cn/soul/exercise/http-divie/",
	"title": "divide 模块实践",
	"tags": [],
	"description": "",
	"content": " divide 模块  参考手册  在项目根目录下的doc\ndoc ├── user-http.md └── plugin-divide.md   通过这两个文档的介绍，针对http的调用，明白两件事。\n  会在自己的项目中引入soul依赖，并且配置相关的接口. 让soul代理自己的接口\n  会调用soul的接口, 会配置admin中divide插件\n    启动项目   启动没有什么特殊配置，idea下一键启动. 启动后注意下各个服务的端口号,soul默认的端口如下\n   server port comment     SoulAdminBootstrap 9095 管理后台   SoulBootstrapApplication 9195 网关   SoulTestHttpApplication 8188 测试项目     在用soul 代理http接口后，请求地址和端口需要换成网关的。\n接口的url也需要按照管理后台中的配置请求. 具体的请求，后面有样例.\n  测试请求    post 的请求方式   # 项目自身的请求 curl -s -H \u0026#34;Content-type: application/json\u0026#34; -d \u0026#39;@./param.json\u0026#39; -X POST localhost:8188//order/save | jq \u0026#39;.\u0026#39;n # soul 代理的请求 curl -s -H \u0026#34;Content-type: application/json\u0026#34; -d \u0026#39;@./param.json\u0026#39; -X POST localhost:9195/http/order/save | jq \u0026#39;.\u0026#39;n     get 的请求方式\n  # 项目自身的请求 curl -s localhost:8188/order/findById\\?id=1 | jq \u0026#39;.\u0026#39; # soul 代理的请求 curl -s localhost:9195/http/order/findById\\?id=1 | jq \u0026#39;.\u0026#39;     安利一下： jq 终端下处理json 文本、文件的瑞士军刀    总结   项目中使用到了webflux相关内容，这块之前没有接触过，周末会补充一下。\n通过项目中自带的docs、example-http.对soul的架构有了进一步的理解。\n 自己简要理解如下： . 后续会补充自己的认知流程图\n 官网的架构图如下:     "
},
{
	"uri": "http://blog.valjean.cn/soul/env/basic/",
	"title": "文档环境、代码环境",
	"tags": [],
	"description": "",
	"content": " hugo theme 选择    一直再找一个比较合适的blog生成工具. 最早的时候是自己编写markdown，上传到csdn中. 后来接触到vim emacs，使用emacs orgmode 自带的publish系统搭建了一套自己的wiki 也整合上传到了github中，不过后续更少更新。所有的学习笔记、工作笔记也都是记录再本地中基本都是组内人再访问。 随后也尝试过jekyll，但是都不太理想。直到前段时间接触、学习了hugo。感觉还是比较符合自己的需求。 目前简单修改了一个主题来使用 hugo-theme-learn, 改的比较糙。也在慢慢的优化使用. 还有就是这个排版，也好头疼。等我再搞搞的\n    github pages 设置    早期在github page中搭建blog是建立一个\u0026lt;USERNAME\u0026gt;.github.io项目。 将编译后的静态内容作为内容提交。   这几天在查看hugo的发布时，发现在可以在github.io项目中，建立一个docs的文件夹，来存放 生成的静态网站内容，这样方便和源码存放。\n    soul 代码编译    下载代码\ngit clone https://github.com/dromara/soul.git    编译代码 shardingshpere 中也是采用这样的命令。 其中rat checkstyle 有空看看的，自己的项目中没有使用过.\nmvn clean package install -Dmaven.test.skip=true -Dmaven.javadoc.skip=true -Drat.skip=true -Dcheckstyle.skip=true    deepin install docker tutor\nsudo apt-get remove -y docker docker-engine docker.io containerd runc sudo apt-get install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add - sudo apt-key fingerprint 0EBFCD88 # 主要是这句，官方文档中，执行类似的这句报错 # https://docs.docker.com/engine/install/ubuntu/ #sudo add-apt-repository \\ # \u0026#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ # $(lsb_release -cs) \\ # stable\u0026#34; printf \u0026#39;deb [arch=amd64] https://download.docker.com/linux/debian stretch stable\\n\u0026#39; | sudo tee /etc/apt/sources.list.d/docker-ce.list sudo apt-get update -y sudo apt-get install -y docker-ce sudo usermod -aG docker $(whoami)    docker install mysql\ndocker run --rm -d --name local_mysql \\ -v /data/docker/mysql/:/var/lib/mysql \\ -p 3306:3306 -e MYSQL_ROOT_PASSWORD=xxxxxxx mysql:5.7.32    docker install zk\ndocker run -d --rm \\ -p 2181:2181 -p 2888:2888 -p 3888:3888 -p 8080:8080 \\ --name local-zk \\ -v /tmp/log/zk:/logs/ \\ -e ZOO_LOG4J_PROP=\u0026#34;INFO,ROLLINGFILE\u0026#34; \\ zookeeper    soul-admin 启动\n mysql 安装以后，修改soul-admin配置文件application-local.yml 中的db密码，就可以编译启动 db 相关文件soul会自动创建\n     环境待改善的地方    emacs emacs 中配置spacemacs, 家里下载spacemacs比较慢。 emacs 排版问题\n  vim vim 中 YouCompleteMe插件的编译安装 vim本身配置的调试\n  deepin 开机中加入一些自启动项\n  hugo 安装的版本过低，渲染org文件失败，折腾半天，升级最近的版本后 支持渲染org文件,这点疏忽了，公司环境安装的比较新。\n  rat checkstyle 查一些资料\n    "
},
{
	"uri": "http://blog.valjean.cn/",
	"title": "soul 学习笔记",
	"tags": [],
	"description": "",
	"content": " soul 学习笔记    官方文档\n    "
},
{
	"uri": "http://blog.valjean.cn/soul/",
	"title": "soul 学习笔记",
	"tags": [],
	"description": "",
	"content": " 开篇   "
},
{
	"uri": "http://blog.valjean.cn/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://blog.valjean.cn/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]