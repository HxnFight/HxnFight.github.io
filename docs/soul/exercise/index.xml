<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>模块实践 on Documentation for Hugo Learn Theme</title>
    <link>http://blog.valjean.cn/soul/exercise/</link>
    <description>Recent content in 模块实践 on Documentation for Hugo Learn Theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Fri, 15 Jan 2021 23:37:57 +0800</lastBuildDate>
    
	<atom:link href="http://blog.valjean.cn/soul/exercise/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>soul-tars 插件实践</title>
      <link>http://blog.valjean.cn/soul/exercise/tars-2/</link>
      <pubDate>Fri, 22 Jan 2021 15:11:27 +0800</pubDate>
      
      <guid>http://blog.valjean.cn/soul/exercise/tars-2/</guid>
      <description>soul-tars 后续  1. tars cloud 中尝试添加soul依赖   tarscloud的demo跑起来后，想着在其上引入 soul-spring-boot-starter-client-tars 依赖，来测试soul-tars。 但是将打好的jar发布到tars框架中，一直报jvm错误，也尝试调整jvm参数，但是均启动失败。 这块应该还是tars框架的使用问题 暂时未深入研究，随后开始尝试 soul-examples-tars.  2. soul-example-tars配置   和使用其他的插件一样， 需要先打开插件开关。 但是不同点是在官方的说明中，并未有tars的使用教程。 这点只能自己摸索。 我在配置的过程中，soul相关的项目是在本机启动， tarscloud是在另一台机器的。 故在配置application.yml的过程中，有一下几点需要注意。 #application.yml soul: tars: adminUrl: http://172.16.0.35:9095 contextPath: /tars appName: tars ipAndPort: 192.168.1.110:9002     soul.tars.adminUrl需要更改为实际的ip地址，    soul.tars.ipAndPort 配置要根据tars-node 启动脚本中暴露的端口来选择一个。 因为应用将来是部署在docker容器内的。
而服务本身的端口与tars框架暴露的端口可以通过tars控制台来更改。       tars-node的启动脚本指定了9000 –&amp;gt; 9010之间的端口对外暴露   docker run -d \ --name=tars-node \ --net=tars \ #-e INET=enp2s0 \ -e WEB_HOST=&amp;#34;http://172.</description>
    </item>
    
    <item>
      <title>心得体会</title>
      <link>http://blog.valjean.cn/soul/exercise/summary/</link>
      <pubDate>Thu, 21 Jan 2021 22:45:24 +0800</pubDate>
      
      <guid>http://blog.valjean.cn/soul/exercise/summary/</guid>
      <description>一 做到、学到的   在这6天里,不管记录的多少、了解的深浅. 在这个大的环境中,一直跟着大家在坚持. 每天多多少少都学到了新的东西. 从第一天的环境搭建,正好将自己刚学习的hugo+github 搭建个人博客的给充分的实践起来. 目前不仅在记录学习使用soul的点点滴滴,也在小组内部 逐步推广起来. 完善工作中的一些琐碎内容的收集和展示.  再有之后,学习soul的使用从 divide–&amp;gt; http –&amp;gt; sofa –&amp;gt; springcloud –&amp;gt; tars. 自己暂时还没有太多的 源码解读,但是整个过程也是收货颇丰的,拓展了视野的范围. 比如: soul作为业务网关,可以 在自己的打点项目中,对在流量网关之后做些数据分流、数据复制,相对的比openresty之类的 流量网关好维护、控制一些.再个就是新了解到的sofa和tars,虽没有太深入的了解,但是通过 简单的搭建使用,至少知道有些事情确实可以做到的. 这点确实特别兴奋.  当然,在这段时间里,自己做的确实不够好. 有些时候也有点马虎. 看着其他的小伙伴那么认真 投入. 真的特别敬佩他们. 想起一句话 以大多数人的努力程度之低，根本轮不到拼天赋 . 再努力和坚持,希望能和大家走到最后的. 二 待改善的     时间安排 睡的太晚,确实有点吃不消的. 尽量将学习的时间调的早一些. 还得以工作内容为主,在soul学习 这块坚持每天有输出就好. 在完成基础任务之上,跟着大家学习.    任务安排 按照自己的时间和精力,规划好自己的节奏和目标. 没法像其他同学那么拼,但至少每天要有一点进步 每天要成长一些.    落下的任务 在过去几天落下的一些任务    soul-tars 的实践,tars的环境已经搭建完毕,尝试将soul-tars的模块跑起来.    webflux的学习实践    soul http dubbo插件的学习     三 下周目标     完成基本的任务.</description>
    </item>
    
    <item>
      <title>Tars 学习</title>
      <link>http://blog.valjean.cn/soul/exercise/tars/</link>
      <pubDate>Wed, 20 Jan 2021 18:52:44 +0800</pubDate>
      
      <guid>http://blog.valjean.cn/soul/exercise/tars/</guid>
      <description>tencent tars-cloud 实践   昨天调试soul-tars 插件，后台服务tars一直启动失败。 今天参考 office quick start ，总算启动成功，不过其中还有很多需要注意的点，在此记录一下。 注意事项     对tars的整体结构得有个大概的认识，自己再部署后面的 tars-framework, tars-nodes 一直不成功 文档中介绍， Tars 框架, 有两个镜像可供选择: framework / tars .自己一直理解成了是framework/nodes framework 、 nodes 两码事. 如果将来拿framework作为节点发布服务，会出现pid not exist. 因其没有java环境 issues   framework: Tars 框架 Docker 制作脚本, 制作的 docker 包含了框架核心服务和 web 管理平台 tars: Tars 框架 Docker 制作脚本, 和 framework 比, 增加了 java, nodejs 等运行时支持, 即可以把 java, nodejs 服务发布到 docker 里面(docker 里面安装了 jdk, node, php 环境) nodes: 是正常的代码运行环境，包含基本的开发环境。     在使用docker快速搭建环境时，在Linux环境下，官方提供了国内的镜像地址 一下的命令执行后，发现是修改的docker daemon 配置文件，将镜像仓库地址更改为了aliyun的。 目前测试在此仓库下，安装mysql 也挺快的，其他镜像未测试，在测试完tars最好还手动更改回去。 其实这块配置的是数组形式，应该可以添加多个.</description>
    </item>
    
    <item>
      <title>Springcloud</title>
      <link>http://blog.valjean.cn/soul/exercise/springcloud/</link>
      <pubDate>Tue, 19 Jan 2021 11:12:46 +0800</pubDate>
      
      <guid>http://blog.valjean.cn/soul/exercise/springcloud/</guid>
      <description>soul springcloud  实践  在soul中增加springcloud配置     将soul-boostrap中有关springcloud的依赖注释打开,注册中心选用的eureka. docker镜像没下载成功,按照教程 eureka tutor, 创建springboot项目,引入 eureka相关依赖,搞定eureka的server服务.    soul-admin 中 打开springcloud插件开关 系统管理 –&amp;gt; 插件管理 (直接保存就ok)   请求调用  ### 测试查询数据 GET http://localhost:9195/springcloud/order/findById?id=999 { &amp;#34;id&amp;#34;: &amp;#34;999&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;hello world spring cloud findById&amp;#34; } ### 测试保存数据 POST http://localhost:9195/springcloud/order/save Content-Type: application/json { &amp;#34;id&amp;#34;: &amp;#34;999&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;valjean&amp;#34; } { &amp;#34;id&amp;#34;: &amp;#34;999&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;hello world spring cloud save order&amp;#34; }  tars cloud   又发现一个新的rpc框架tarscloud, 原来以为是个压缩相关的模块的呢, ~tars~嘛.</description>
    </item>
    
    <item>
      <title>Webflux</title>
      <link>http://blog.valjean.cn/soul/exercise/webflux/</link>
      <pubDate>Mon, 18 Jan 2021 16:42:43 +0800</pubDate>
      
      <guid>http://blog.valjean.cn/soul/exercise/webflux/</guid>
      <description> webflux   office docs </description>
    </item>
    
    <item>
      <title>Sofa 模块实践</title>
      <link>http://blog.valjean.cn/soul/exercise/sofa/</link>
      <pubDate>Sun, 17 Jan 2021 22:28:39 +0800</pubDate>
      
      <guid>http://blog.valjean.cn/soul/exercise/sofa/</guid>
      <description>sofa调试  修改配置     soul-boostrap pom 文件中增加相关依赖   &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-sofa&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${project.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;sofa-rpc-all&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt;     在soul-admin中打开sofa的插件开关 系统管理 –&amp;gt; 插件管理 (直接保存就ok)   请求调用   使用的idea http client 工具 ### 测试保存数据 post http://localhost:9195/sofa/insert content-type: application/json { &amp;#34;id&amp;#34;: &amp;#34;999&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;valjean&amp;#34; } ### 测试按条件查找数据 post http://localhost:9195/sofa/findbyid content-type: application/json { &amp;#34;id&amp;#34;: &amp;#34;999&amp;#34; } ### 测试无条件查询 post http://localhost:9195/sofa/findall  遇到的问题     不带参数请求ok,带参数出现序列化错误.</description>
    </item>
    
    <item>
      <title>Dubbo 模块实践</title>
      <link>http://blog.valjean.cn/soul/exercise/dubbo/</link>
      <pubDate>Sat, 16 Jan 2021 17:35:36 +0800</pubDate>
      
      <guid>http://blog.valjean.cn/soul/exercise/dubbo/</guid>
      <description>dubbo模块  参考手册   官方:dubbo插件 官方:dubbo用户  文档说明很详细的,其中提到以下几个重点    dubbo 服务接入soul的配置    接入之后的调用方式, 参数传递方式. 全部是post请求 Content-Type: application/json格式.    将dubbo服务转成http形式, 感觉可以用在项目中,省去给dubbo服务搭建的空壳子api.   实际测试    偶尔发现idea自带的 http client,比之前有了很大的改善,可以支持将请求放在文本中. 具体的使用可以参考官方文档: idea tools http client  # dubbo 插件的要用post请求,请求类型为 Content-Type: application/json # 测试查询数据 POST http://localhost:9195/dubbo/findById Content-Type: application/json { &amp;#34;id&amp;#34;: &amp;#34;999&amp;#34; } # 测试保存数据 POST http://localhost:9195/dubbo/insert Content-Type: application/json { &amp;#34;id&amp;#34;: &amp;#34;999&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;valjean&amp;#34; }   Tip: 请求记录文件,可以直接导入idea中     dubbo-test.</description>
    </item>
    
    <item>
      <title>divide 模块实践</title>
      <link>http://blog.valjean.cn/soul/exercise/http-divie/</link>
      <pubDate>Fri, 15 Jan 2021 23:38:49 +0800</pubDate>
      
      <guid>http://blog.valjean.cn/soul/exercise/http-divie/</guid>
      <description>divide 模块  参考手册   在项目根目录下的doc doc ├── user-http.md └── plugin-divide.md   通过这两个文档的介绍，针对http的调用，明白两件事。    会在自己的项目中引入soul依赖，并且配置相关的接口. 让soul代理自己的接口    会调用soul的接口, 会配置admin中divide插件   启动项目   启动没有什么特殊配置，idea下一键启动. 启动后注意下各个服务的端口号,soul默认的端口如下    server port comment     SoulAdminBootstrap 9095 管理后台   SoulBootstrapApplication 9195 网关   SoulTestHttpApplication 8188 测试项目     在用soul 代理http接口后，请求地址和端口需要换成网关的。
接口的url也需要按照管理后台中的配置请求. 具体的请求，后面有样例. 测试请求     post 的请求方式   # 项目自身的请求 curl -s -H &amp;#34;Content-type: application/json&amp;#34; -d &amp;#39;@.</description>
    </item>
    
  </channel>
</rss>