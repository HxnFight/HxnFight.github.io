<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>soul 学习笔记 on Documentation for Hugo Learn Theme</title>
    <link>http://blog.valjean.cn/</link>
    <description>Recent content in soul 学习笔记 on Documentation for Hugo Learn Theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Wed, 13 Jan 2021 23:27:41 +0800</lastBuildDate><atom:link href="http://blog.valjean.cn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>divide 模块实践</title>
      <link>http://blog.valjean.cn/soul/exercise/http-divie/</link>
      <pubDate>Fri, 15 Jan 2021 23:38:49 +0800</pubDate>
      
      <guid>http://blog.valjean.cn/soul/exercise/http-divie/</guid>
      <description>divide 模块  参考手册  在项目根目录下的doc
doc ├── user-http.md └── plugin-divide.md   通过这两个文档的介绍，针对http的调用，明白两件事。
  会在自己的项目中引入soul依赖，并且配置相关的接口. 让soul代理自己的接口
  会调用soul的接口, 会配置admin中divide插件
    启动项目   启动没有什么特殊配置，idea下一键启动. 启动后注意下各个服务的端口号,soul默认的端口如下
   server port comment     SoulAdminBootstrap 9095 管理后台   SoulBootstrapApplication 9195 网关   SoulTestHttpApplication 8188 测试项目     在用soul 代理http接口后，请求地址和端口需要换成网关的。
接口的url也需要按照管理后台中的配置请求. 具体的请求，后面有样例.
  测试请求    post 的请求方式   # 项目自身的请求 curl -s -H &amp;#34;Content-type: application/json&amp;#34; -d &amp;#39;@.</description>
    </item>
    
    <item>
      <title>文档环境、代码环境</title>
      <link>http://blog.valjean.cn/soul/env/basic/</link>
      <pubDate>Thu, 14 Jan 2021 22:38:21 +0800</pubDate>
      
      <guid>http://blog.valjean.cn/soul/env/basic/</guid>
      <description>hugo theme 选择    一直再找一个比较合适的blog生成工具. 最早的时候是自己编写markdown，上传到csdn中.
  后来接触到vim emacs，使用emacs orgmode 自带的publish系统搭建了一套自己的wiki， 也整合上传到了github中，不过后续更少更新。所有的学习笔记、工作笔记也都是记录再本地中基本都是组内人再访问。
  随后也尝试过jekyll，但是都不太理想。直到前段时间接触、学习了hugo。感觉还是比较符合自己的需求。
  目前简单修改了一个主题来使用 hugo-theme-learn, 改的比较糙。也在慢慢的优化使用. 还有就是这个排版，也好头疼。等我再搞搞的
    github pages 设置    早期在github page中搭建blog是建立一个&amp;lt;USERNAME&amp;gt;.github.io项目。 将编译后的静态内容作为内容提交。   这几天在查看hugo的发布时，发现在可以在github.io项目中，建立一个docs的文件夹，来存放 生成的静态网站内容，这样方便和源码以前存放。
    soul 代码编译    下载代码
git clone https://github.com/dromara/soul.git    编译代码 shardingshpere 中也是采用这样的命令。 其中rat checkstyle 有空看看的，自己的项目中没有使用过.
mvn clean package install -Dmaven.test.skip=true -Dmaven.javadoc.skip=true -Drat.</description>
    </item>
    
  </channel>
</rss>
