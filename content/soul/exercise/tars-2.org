#+title: soul-tars 插件实践
#+date:  2021-01-22T15:11:27+08:00
#+weight: 5

** soul-tars 后续

*** 1. tars cloud 中尝试添加soul依赖
      
     tarscloud的demo跑起来后，想着在其上引入 soul-spring-boot-starter-client-tars 依赖，来测试soul-tars。  \\
     但是将打好的jar发布到tars框架中，一直报jvm错误，也尝试调整jvm参数，但是均启动失败。 这块应该还是tars框架的使用问题 \\
     暂时未深入研究，随后开始尝试 soul-examples-tars. 
      
   [[file:../images/tars-demo-erro.png]] 
      
*** 2. soul-example-tars配置
      
     和使用其他的插件一样， 需要先打开插件开关。 但是不同点是在官方的说明中，并未有tars的使用教程。 这点只能自己摸索。  \\
     我在配置的过程中，soul相关的项目是在本机启动， tarscloud是在另一台机器的。 故在配置application.yml的过程中，有一下几点需要注意。
     
#+begin_src 
#application.yml
soul:
  tars:
    adminUrl: http://172.16.0.35:9095
    contextPath: /tars
    appName: tars
    ipAndPort: 192.168.1.110:9002
#+end_src
     - soul.tars.adminUrl需要更改为实际的ip地址，
     - soul.tars.ipAndPort 配置要根据tars-node 启动脚本中暴露的端口来选择一个。 因为应用将来是部署在docker容器内的。\\
       而服务本身的端口与tars框架暴露的端口可以通过tars控制台来更改。

    [[file:../images/soul-tars-cnf.png]] 

     - tars-node的启动脚本指定了9000 --> 9010之间的端口对外暴露
#+begin_src 
docker run -d \
    --name=tars-node \
    --net=tars \
    #-e INET=enp2s0 \
    -e WEB_HOST="http://172.25.0.3:3000" \
    --ip="172.25.0.5" \
    -v /data/workspace/tars-cloud/tars:/data/tars \
    -v /etc/localtime:/etc/localtime \
    -p 9000-9010:9000-9010 \
    tarscloud/tars-node:stable

#+end_src
      
     - 将SoulExampleServer.SoulExampleApp.config.conf文件中 192.168.41.103 全部替换为127.0.0.1. 因其在容器内部调用

*** 3. 接口测试调用
    在tars中部署应用完成后， 可以在soul-admin 中tars的接口已经注册好了
     
   [[file:../images/soul-tars-select.png]]

    tars 平台中调用soul-example
   [[file:../images/soul-tars-api.png]] 

*** 4. soul-gateway 调用
   通用gateway的调用报的404，这个还在排查中.

#+begin_src  shell

POST http://localhost:9195/tars/hello

HTTP/1.1 404 Not Found
Content-Type: application/json
Content-Length: 136

{
  "timestamp": "2021-01-22T08:04:09.878+0000",
  "path": "/tars/hello",
  "status": 404,
  "error": "Not Found",
  "message": null,
  "requestId": "2adfe3bc"
}

Response code: 404 (Not Found); Time: 258ms; Content length: 136 bytes


#+end_src


** soul-tar客户端调试
  今天将剩下的tars调试走通了，大致过程记录如下。 tars 部署的应用还是老的代码，本地的soul-bootstrap是最近的代码。\\
  随后将所有代码更新，再跑一边流程。 目前调试中遇到的情况记录如下。
  
*** 1. 加入pom依赖
    soul-bootstrap pom中单加入soul-spring-boot-starter-plugin-tars 启动报错。 

#+begin_src shell
  Exception in thread "WebSocketConnectReadThread-22" java.lang.NoClassDefFoundError: com/qq/tars/client/CommunicatorFactory
	at org.dromara.soul.plugin.tars.cache.ApplicationConfigCache.<init>(ApplicationConfigCache.java:87)
	at org.dromara.soul.plugin.tars.cache.ApplicationConfigCache.<init>(ApplicationConfigCache.java:61)
	at org.dromara.soul.plugin.tars.cache.ApplicationConfigCache$ApplicationConfigCacheInstance.<clinit>(ApplicationConfigCache.java:208)
	at org.dromara.soul.plugin.tars.cache.ApplicationConfigCache.getInstance(ApplicationConfigCache.java:198)
	at org.dromara.soul.plugin.tars.subscriber.TarsMetaDataSubscriber.onSubscribe(TarsMetaDataSubscriber.java:49)
	at org.dromara.soul.plugin.sync.data.websocket.handler.MetaDataHandler.lambda$null$0(MetaDataHandler.java:42)

#+end_src

    ~CommunicatorFactory~ 查看该类是属于com.tencent.tars 下的依赖，在pom中添加如下依赖。在项目中添加相关依赖后，不是立即生效的，\\
    这个时候打包还是会出错。 可以安装 [[https://plugins.jetbrains.com/plugin/7179-maven-helper][maven-helper]] 插件，点击Reimport 再查询相关依赖是否引入，很方便

#+begin_src xml
       <dependency>
            <groupId>com.tencent.tars</groupId>
            <artifactId>tars-client</artifactId>
            <version>1.7.2</version>
        </dependency>
#+end_src

[[file:../images/tars-maven.png]]

*** 2. 更改元数据
    在tars中的应用启动后，相关的元数据信息已经注册到soul-admin中。 但是执行请求的时候，还是会报如下错误。

[[file:../images/tar-param-error.png]]

   随后在相关的test中发现，soul-bootstrap使用功能的元数据中的params是left、right的，而应用上报上来的事key、value的 \\
   我的元数据信息：
#+begin_src json
{
  "methodInfo": [
    {
      "methodName": "hello",
      "params": [
        {
          "key": "int",
          "value": "no"
        },
        {
          "key": "java.lang.String",
          "value": "name"
        }
      ],
      "returnType": "java.lang.String"
    },
    {
      "methodName": "helloInt",
      "params": [
        {
          "key": "int",
          "value": "no"
        },
        {
          "key": "java.lang.String",
          "value": "name"
        }
      ],
      "returnType": "java.lang.Integer"
    }
  ]
}

#+end_src


   按照test中的示例，将元数据更新成如下的形式.
#+begin_src json
{
  "methodInfo": [
    {
      "methodName": "hello",
      "params": [
        {
          "left": "int",
          "right": "no"
        },
        {
          "left": "java.lang.String",
          "right": "name"
        }
      ],
      "returnType": "java.lang.String"
    },
    {
      "methodName": "helloInt",
      "params": [
        {
          "left": "int",
          "right": "no"
        },
        {
          "left": "java.lang.String",
          "right": "name"
        }
      ],
      "returnType": "java.lang.Integer"
    }
  ]
}

#+end_src

*** 3. 更改解析参数
    在元数据更改成功后，测试调用的请求依然失败，打断点跟踪发现类型转换错误。
[[file:../images/tar-param-cast.png]]

    随后将这块的改成String.valueOf(). 再重启应用,发起调用顺利通过。
[[file:../images/tar-param-change.png]]

*** 4. 请求测试
#+begin_src  shell
POST http://localhost:9195/tars/hello

HTTP/1.1 200 OK
Content-Type: application/json
content-length: 97

{
  "code": 200,
  "message": "Access to success!",
  "data": "hello no=1, name=valjean, time=1611916346616"
}

Response code: 200 (OK); Time: 10652ms; Content length: 97 bytes


#+end_src

    虽然，目前测试通过。 但是还知道为啥，tars的上报的数据和test中的数据格式不一致，这块明天再跟踪一下。 这块总算告一段落。
    
