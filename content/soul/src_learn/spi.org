#+title: spi 机制
#+date:  2021-01-26T16:05:44+08:00
#+weight: 7

** SPI简介
   soul 中有部分功能的扩展是通过spi方式实现的,可以找下 ~spring.factories~ 文件，每一个这样的文件，就是一个spi。大致意思如下：
   
   #+begin_quote
   SPI（Service Provider Interface），是JDK内置的一种 服务提供发现机制，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用， \\
   比如java.sql.Driver接口，其他不同厂商可以针对同一接口做出不同的实现，MySQL和PostgreSQL都有不同的实现提供给用户， \\
   而Java的SPI机制可以为某个接口寻zhao服务实现。Java中SPI机制主要思想是将装配的控制权移到程序之外，在模块化设计中这个机制尤其重要，其核心思想就是 解耦。
   #+end_quote

   整体的机制，如下图：
   [[../images/spi.png]]

   
   - SPI 和API区别
       一个是直接拿来使用的，另一个则是拿来进行扩展的
     - API是调用并用于实现目标的类、接口、方法等的描述
     - SPI是扩展和实现以实现目标的类、接口、方法等的描述

     
** SPI使用
   要使用Java SPI，需要遵循如下约定：
    - 当服务提供者提供了接口的一种具体实现后，在jar包的META-INF/services目录下创建一个以“接口全限定名”为命名的文件，内容为实现类的全限定名
    - 接口实现类所在的jar包放在主程序的classpath中
    - 主程序通过java.util.ServiceLoder动态装载实现模块，它通过扫描META-INF/services目录下的配置文件找到实现类的全限定名，把类加载到JVM
    - SPI的实现类必须携带一个不带参数的构造方法
      
** SpringFactoriesLoader
    SpringFactoriesLoader 是 Spring 中十分重要的一个扩展机制之一，它的使用方式和实现原理和 SPI 十分相似，只不过，提供了更加强大的功能。 \\
    和 SPI 不同，由于 SpringFactoriesLoader 中的配置文件格式是 properties 文件，因此，不需要要像 SPI 中那样为每个服务都创建一个文件， \\
    而是选择直接把所有服务都扔到 META-INF/spring.factories 文件中。
