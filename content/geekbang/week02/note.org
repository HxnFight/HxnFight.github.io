#+title: Note
#+date:  2021-03-08T10:10:47+08:00
#+weight: 2

* 相关资料
** jndi
   - https://tomcat.apache.org/tomcat-8.0-doc/jndi-resources-howto.html
** hibernate 
   - https://hibernate.org/validator/
 
* tomcat jndi
** resource-ref  resource-env-ref 区别
  https://doc.bccnsoft.com/docs/tomcat-8.0-doc/jndi-resources-howto.html  \\
  <resource-ref> - Resource reference, which is typically to an object factory for resources such as a JDBC DataSource, \\
  a JavaMail Session, or custom object factories configured into Tomcat. \\

  <resource-env-ref> - Resource environment reference,  \\
  a new variation of resource-ref added in Servlet 2.4 that is simpler to configure for resources that do not require authentication information.

* derby

  [[http://db.apache.org/derby/][office web site]]
** derby 路径问题
   使用derby，程序报
   #+begin_quote
   getConnection failed: SQL Exception: Failed to create database '/db/user-platform', see the next exception for details
   #+end_quote
   
   - [[https://db.apache.org/derby/docs/10.0/manuals/develop/develop14.html#HDRSII-DEVELOP-22102][office url issue]]
     
     ~jdbc:derby:/db/user-platform;create=true~
     #+begin_quote

     jdbc:derby:/reference/phrases/french  \\
     Open a connection to the database /reference/phrases/french. \\
     On a UNIX system, this would be the path of the directory. On a Windows system, \\
     the path would be C:\reference\phrases\french if the current drive were C. If a jar file storing databases were in the user's class path, \\
     this could also be a path within the jar file.
     
     #+end_quote

     按照官网的解释， ~/reference/phrases/french~ 后面这段对应的是本地的一个路劲地址，所以程序需要有创建的权限才行,  \\
     因为是在mac、Linux下使用，将derby的path设置为 ~/tmp/user-platform~ 

     

* pom 依赖
** 项目启动报如下的错

  #+begin_quote
  java.lang.NoClassDefFoundError: javax/el/ELManager
  #+end_quote

   - 降低hibernate-validator的版本

     #+begin_src xml
    <dependency>  
        <groupId>org.hibernate</groupId>  
        <artifactId>hibernate-validator</artifactId> 
        <version>5.1.0.Final</version>  
    </dependency>
     #+end_src
     
   - hibernate-validator 的maven groupId 做过变更， org.hibernate.validator » hibernate-validator  \\
    在 org.hibernate.validator 下找不到6.0.0 以下的版本，故降低版本的时候，需要注意groupId的取值 [[https://mvnrepository.com/artifact/org.hibernate/hibernate-validator][maven-repo]]
   [[file: ../images/hibernate-dep.png]] 

** 内嵌tomcat升级版本
   尝试将pom中的tomcat版本统一，发现改到8报错，暂未深究
     
** hiberate

*** hiberate 查询
   - https://www.objectdb.com/java/jpa/query/jpql/select

*** 查询的时候，用类名，而不是表名
   - https://blog.csdn.net/wuting3680278/article/details/71974028


** 项目分析
*** 大框架的调用
 #+BEGIN_SRC plantuml :file ./images/fx.png :exports results :eval query-export
   @startuml
 |ComponentContextInitializerListener|
 start
 :contextInitialized;
 |#AntiqueWhite|ComponentContext|
 :init;
 :initEnvContext;
 :instantiateComponents;
 :initializeComponents;
 stop
 @enduml
 #+END_SRC

 #+RESULTS:
 [[file:../images/fx.png]]

*** ComponentContext.instantiateComponents 
  executeInContext 方法有重载，然后按照下面的调用链一直走下去，lambda是在第三个executeInContext中执行的. \\
  这里是查找jndi命名空间，区分目录、实现类，如果是目录的话会递归调用，最后找出所有的实现类的名字，放入到list中. 

  随后再通过这些name，再次查找对应的实现类，组成k:v 放入到map中，供以后的查询使用. 该函数完成功能.
  
  带入lambda这样的使用，确实方便。
#+begin_src  plantuml :file ./images/instantiateComponents.png :exports results :eval query-export
@startuml
:start;
:listAllComponentNames();
:listAllComponentNames(String name);
:executeInContext(ThrowableFunction<Context, R> function);
:executeInContext(ThrowableFunction<Context, R> function, boolean ignoredException);
:executeInContext(Context context, ThrowableFunction<Context, R> function, boolean ignoredException);
:function execute;
 stop
@enduml
#+end_src

#+RESULTS:
[[file:../images/instantiateComponents.png]]

*** ComponentContext.initializeComponents 
    通过上步maps获取到所有的需要初始化类，以及资源。 \\
    挨个遍历找 包含@Resource  并将所需要的资源通过反射注入进去 \\
    而包含@PostConstruct的类，则调用其对应的方法,当然里面也有更加name查找对应组件的过程
    

#+begin_src  plantuml :file ./images/initializeComponents.png :exports results :eval query-export
@startuml
:start;
:injectComponents(component, componentClass);
:processPostConstruct(component, componentClass);
:processPreDestroy;
 stop
@enduml
#+end_src

#+RESULTS:
[[file:../images/initializeComponents.png]]

